datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime @updatedAt @db.Timestamptz(3)
  firstName        String
  lastName         String
  email            String   @unique
  password         String
  terms            Boolean  @default(false)
  role             Role     @default(USER)
  contacts         Contact[]
  aiSessions       AISession[]
}

model Contact {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  name      String
  email     String?
  phone     String?
  address   String?
  photo     String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AISession {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime @updatedAt @db.Timestamptz(3)
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt        String? @default("")
  models        String[] // Array of model names used
  conversations AIConversation[]
  totalCost     Float    @default(0)
  totalTokens   Int      @default(0)
  responseTime  Int?     // Total response time in milliseconds
  status        SessionStatus @default(ACTIVE)
}

model AIConversation {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime @updatedAt @db.Timestamptz(3)
  sessionId     String
  session       AISession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  modelName     String
  userPrompt    String?
  response      String
  inputTokens   Int      @default(0)
  outputTokens  Int      @default(0)
  cost          Float    @default(0)
  responseTime  Int?     // Response time in milliseconds
  status        ConversationStatus @default(COMPLETED)
}

enum Role {
  USER
  ADMIN
}

enum SessionStatus {
  ACTIVE
  COMPLETED
  ERROR
}

enum ConversationStatus {
  PENDING
  STREAMING
  COMPLETED
  ERROR
}
